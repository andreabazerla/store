package com.andreabazerla.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.servlet.ModelAndView;

import com.andreabazerla.bean.BeanProduct;
import com.andreabazerla.bean.BeanPurchase;
import com.andreabazerla.bean.BeanReceipt;
import com.andreabazerla.bean.BeanUser;
import com.andreabazerla.bean.PageBeanCart;
import com.andreabazerla.bean.PageBeanProfile;
import com.andreabazerla.bean.PageBeanShopping;
import com.andreabazerla.exception.PeopleException;
import com.andreabazerla.model.Product_t;
import com.andreabazerla.model.User_t;
import com.andreabazerla.util.EmailValidator;
import com.andreabazerla.util.NullValue;

@Controller
public class UserController extends ParentController
{

	@RequestMapping(value = "/DeleteUser", method = RequestMethod.GET, params =
	{ "id" })
	public void deleteUser(HttpServletRequest request,
	                       @RequestParam("id") int id)
	{

		getWebFacade().getUserService()
		              .delete(id);

	}

	@RequestMapping(value = "/Profile", method = RequestMethod.GET)
	public ModelAndView profile(HttpServletRequest request)
	{

		HttpSession httpSession = request.getSession();
		BeanUser beanUser = (BeanUser) httpSession.getAttribute("currentUser");

		User_t user = getWebFacade().getUserService()
		                            .get(beanUser.getId());

		PageBeanProfile pageBeanProfile = new PageBeanProfile();

		pageBeanProfile.setRole(user.getRole());
		pageBeanProfile.setCode(user.getCode());
		pageBeanProfile.setUsername(user.getUsername());
		pageBeanProfile.setPassword(user.getPassword());
		pageBeanProfile.setName(user.getName());
		pageBeanProfile.setSurname(user.getSurname());
		pageBeanProfile.setEmail(user.getEmail());
		pageBeanProfile.setBirthday(user.getBirthday());
		pageBeanProfile.setCity(user.getCity());
		pageBeanProfile.setAddress(user.getAddress());
		pageBeanProfile.setCap(user.getCap());
		pageBeanProfile.setNumber(user.getNumber());

		return new ModelAndView("profile",
		                        "pageBean",
		                        pageBeanProfile);
	}

	@RequestMapping(value = "/Users", method =
	{ RequestMethod.GET, RequestMethod.POST })
	public ModelAndView userListPOST()
	{

		List<User_t> users = new ArrayList<User_t>();

		users = (List<User_t>) getWebFacade().getUserService()
		                                     .read();

		ModelAndView modelAndView = new ModelAndView("userList");
		modelAndView.addObject("users",
		                       users);

		return modelAndView;
	}

	@RequestMapping(value = "/Cart", method =
	{ RequestMethod.POST, RequestMethod.GET })
	public ModelAndView userCart(HttpServletRequest request) throws Exception
	{
		
		HttpSession httpSession = request.getSession();
		BeanUser beanUser = (BeanUser) httpSession.getAttribute("currentUser");
		int idUser = beanUser.getId();

		PageBeanCart pageBeanCart = new PageBeanCart();

		List<BeanProduct> beanProductList = getWebFacade().getBeanProductListFromCart(idUser);

		float total = NullValue.NUMBER;

		for (BeanProduct beanProduct : beanProductList)
		{
			pageBeanCart.add(beanProduct);
			total += beanProduct.getPrice();
		}

		pageBeanCart.setTotal(total);
		pageBeanCart.setIdUser(idUser);

		ModelAndView modelAndView = new ModelAndView("cart",
		                                             "pageBean",
		                                             pageBeanCart);

		return modelAndView;
	}

	BeanProduct findBeanProduct(int id,
	                                   List<BeanProduct> listCarnet)
	{
		for (BeanProduct beanProductPreview : listCarnet)
		{
			if (beanProductPreview.getId() == id)
			{
				return beanProductPreview;
			}
		}
		return null;
	}

	@RequestMapping(value = "/AddToCart", method =
	{ RequestMethod.GET, RequestMethod.POST })
	public void addToCart(HttpServletRequest request,
	                      HttpServletResponse response)
	        throws IOException
	{

		HttpSession httpSession = request.getSession();
		BeanUser beanUser = (BeanUser) httpSession.getAttribute("currentUser");
		int idUser = beanUser.getId();

		int idProduct = Integer.parseInt((String) request.getParameter("idProduct"));
		getWebFacade().addToCart(idUser,
		                         idProduct);

		Product_t product = getWebFacade().getProductService()
		                                  .unavailable(idProduct);

		response.getWriter()
		        .write("{ \"idCard\": " + product.getId()
		               + "}");

	}

	@RequestMapping(value = "/AddNewProduct", method =
	{ RequestMethod.POST })
	@ResponseStatus(value = HttpStatus.OK)
	public void addNewProduct(HttpServletRequest request) throws SQLException
	{

		HttpSession httpSession = request.getSession();
		BeanUser beanUser = (BeanUser) httpSession.getAttribute("currentUser");
		int idUser = beanUser.getId();

		getWebFacade().createNewProduct(idUser,
		                                request);

	}

	@RequestMapping(value = "/Shopping", method = RequestMethod.GET)
	public ModelAndView shopping(HttpServletRequest request)
	{

		HttpSession httpSession = request.getSession();
		BeanUser beanUser = (BeanUser) httpSession.getAttribute("currentUser");
		int idUser = beanUser.getId();

		Map<BeanReceipt, BeanPurchase> beanReceiptPurchaseMap = getWebFacade().getBeanReceiptPurchaseMap(idUser);

		PageBeanShopping pageBeanShopping = new PageBeanShopping();

		pageBeanShopping.set(beanReceiptPurchaseMap);

		return new ModelAndView("shopping",
		                        "pageBean",
		                        pageBeanShopping);

	}

	@RequestMapping(value = "/Buy", method = RequestMethod.POST)
	public ModelAndView buy(HttpServletRequest request) throws SQLException
	{

		HttpSession httpSession = request.getSession();
		BeanUser beanUser = (BeanUser) httpSession.getAttribute("currentUser");
		int idUser = beanUser.getId();

		List<BeanProduct> beanProductPreviewList = getWebFacade().getBeanProductListFromCart(idUser);

		PageBeanShopping pageBeanShopping = new PageBeanShopping();

		pageBeanShopping = getWebFacade().setPageBeanShopping(beanProductPreviewList,
		                                                      idUser,
		                                                      pageBeanShopping);

		return new ModelAndView("redirect:/Shopping");

	}

	@RequestMapping(value = "/RemoveFromCart", method = RequestMethod.POST)
	public void removeFromCart(HttpServletRequest request,
	                           HttpServletResponse response)
	        throws IOException
	{

		HttpSession httpSession = request.getSession();
		BeanUser beanUser = (BeanUser) httpSession.getAttribute("currentUser");
		int userId = beanUser.getId();

		int productId = Integer.parseInt(request.getParameter("productId"));

		getWebFacade().getProductService()
		              .removeFromCart(userId,
		                              productId);

		response.getWriter()
		        .write("{ \"idCard\": " + productId
		               + "}");
	}
	
	@RequestMapping(value = "/PrintReceipt", method = RequestMethod.POST)
	public ModelAndView printReceipt(HttpServletRequest request)
	{
		
		int idReceipt = Integer.parseInt(request.getParameter("id-receipt"));
		
		getWebFacade().getReceiptService()
		.printReceipt(idReceipt);
		
		return new ModelAndView("redirect:/Shopping");
		
	}

	@RequestMapping(value = "/DeletePurchase", method = RequestMethod.POST)
	public ModelAndView deletePurchase(HttpServletRequest request) throws IOException
	{

		HttpSession httpSession = request.getSession();
		BeanUser beanUser = (BeanUser) httpSession.getAttribute("currentUser");
		int idUser = beanUser.getId();

		int idReceipt = Integer.parseInt(request.getParameter("id-receipt"));

		getWebFacade().deletePurchase(idUser,
		                              idReceipt);

		return new ModelAndView("redirect:/Shopping");
		
	}

	@RequestMapping(value = "/EditUser", method = RequestMethod.POST)
	public ModelAndView editUser(HttpServletRequest request)
	{
		request.setAttribute("action",
		                     "EDIT_USER");
		int id = Integer.parseInt(request.getParameter("idUser"));

		User_t otherUser = null;
		otherUser = getWebFacade().getUserService()
		                          .get(id);
		if (otherUser == null)
			throw new PeopleException("Utente non trovato, ID = " + id);

		request.setAttribute("currentUser",
		                     otherUser);
		ModelAndView modelAndView = new ModelAndView("signup");
		modelAndView.addObject("currentUser",
		                       otherUser);
		modelAndView.addObject("action",
		                       "EDIT_USER");

		return modelAndView;
	}

	@RequestMapping(value = "/EditAdmin", method = RequestMethod.POST)
	public ModelAndView editAdmin(HttpServletRequest request)
	{
		HttpSession httpSession = request.getSession();
		User_t user = (User_t) httpSession.getAttribute("currentUser");

		ModelAndView modelAndView = new ModelAndView("signup");
		modelAndView.addObject("currentUser",
		                       user);
		modelAndView.addObject("action",
		                       "EDIT_ADMIN");

		return modelAndView;
	}

	@RequestMapping(value = "/UpdateProfile", method = RequestMethod.POST)
	public String updateProfile(HttpServletRequest request,
	                            HttpServletResponse response)
	        throws IOException, ServletException, SQLException
	{

		String button = null;
		String action = request.getParameter("action");
		HttpSession httpSession = request.getSession();

		if (action == null)
		{
			button = (String) httpSession.getAttribute("button");
		}
		else
		{
			button = request.getParameter("button");
			httpSession.setAttribute("button",
			                         button);
		}

		User_t user = (User_t) httpSession.getAttribute("currentUser");

		String feedback = null;
		PrintWriter printWriter = response.getWriter();

		int id = Integer.parseInt(request.getParameter("id"));
		String role = null;
		String code = request.getParameter("code");
		String username = request.getParameter("username");
		String password = request.getParameter("password");
		String confirmation = request.getParameter("confirmation");
		String name = request.getParameter("name");
		String surname = request.getParameter("surname");
		String email = request.getParameter("email");
		String birthday = request.getParameter("birthday");
		String city = request.getParameter("city");
		String address = request.getParameter("address");
		int cap = Integer.parseInt(request.getParameter("cap"));
		int number = Integer.parseInt(request.getParameter("number"));
		button = request.getParameter("button");

		if (button.equals("Update"))
		{
			role = user.getRole();
		}
		else
			if (button.equals("Manage"))
			{
				role = request.getParameter("role");
			}

		if (role == null)
			role = "USER";
		if (role.equals("on"))
			role = "ADMIN";

		if (!ifNull(name) && !ifNull(surname)
		    && !ifNull(username)
		    && !ifNull(password)
		    && !ifNull(confirmation)
		    && !ifNull(email)
		    && !ifNull(birthday)
		    && (button.equals("Update") || button.equals("Manage")))
		{

			User_t tempUser = getWebFacade().getUserService()
			                                .load(username);

			if (tempUser == null || (!username.equals(user.getUsername()) && (button.equals("Update"))))
			{
				feedback = "{ \"type\": \"0\", \"field\": \"username\", \"message\": \"Users not equals\" }";
			}
			else
			{
				if (!password.equals(confirmation))
				{
					feedback = "{ \"type\": \"0\", \"field\": \"confirmation\", \"message\": \"Passwords not equals\" }";
				}
				else
					if (!EmailValidator.validate(email))
					{
						feedback = "{ \"type\": \"0\", \"field\": \"email\", \"message\": \"Email not valid\" }";
					}
					else
					{
						feedback = "{ \"type\": \"1\", \"message\": \"Ok user updated\" }";

						user = new User_t(id,
						                  role,
						                  code,
						                  username,
						                  password,
						                  name,
						                  surname,
						                  email,
						                  birthday,
						                  city,
						                  address,
						                  cap,
						                  number);
						getWebFacade().getUserService()
						              .update(user);

						if (button.equals("Update"))
						{
							request.getSession()
							       .setAttribute("currentUser",
							                     user);
						}
						else
							if (button.equals("Manage"))
							{
								request.setAttribute("action",
								                     "USER_UPDATED");
							}
					}
			}
		}
		else
		{
			if (ifNull(birthday))
			{
				feedback = "{ \"type\": \"0\", \"field\": \"birthday\", \"message\": \"Empty field\" }";
			}
			else
			{
				request.setAttribute("error",
				                     "Empty field");
			}
		}

		response.setContentType("application/json;charset=utf-8");
		printWriter.print(feedback);
		printWriter.flush();
		printWriter.close();
		return null;
	}

}
