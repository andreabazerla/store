package com.andreabazerla.dao;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.andreabazerla.model.Factory_t;

@Repository
public class FactoryDaoImpl implements FactoryDao
{

	@Autowired
	private SessionFactory sessionFactory;

	@Override
	public void createFactory(Factory_t factory_t)
	{
		sessionFactory.getCurrentSession()
		              .saveOrUpdate(factory_t);

	}

	@SuppressWarnings("deprecation")
	public Factory_t readFactory(int id)
	{

		Session session = sessionFactory.getCurrentSession();

		//		session.beginTransaction();

		Factory_t factory = (Factory_t) session.createCriteria(Factory_t.class)
		                                       .add(Restrictions.eq("id",
		                                                            id))
		                                       .uniqueResult();

		//		sessionFactory.getCurrentSession()
		//		              .getTransaction()
		//		              .commit();

		return factory;

	}

	@Override
	public Factory_t getFactory(int id)
	{
		Factory_t factory = null;

		//		Session session = sessionFactory.getCurrentSession();
		//
		//		Transaction transaction = session.beginTransaction();

		factory = (Factory_t) sessionFactory.getCurrentSession()
		                                    .get(Factory_t.class,
		                                         id);

		//		transaction.commit();

		return factory;
	}

	public void deleteFactory(int id)
	{
		Factory_t factory_t = (Factory_t) sessionFactory.getCurrentSession()
		                                                .load(Factory_t.class,
		                                                      id);
		if (null != factory_t)
		{
			this.sessionFactory.getCurrentSession()
			                   .delete(factory_t);
		}
	}

}
