package com.andreabazerla.dao;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.andreabazerla.model.Person_t;

@Repository
public class PersonDaoImpl implements PersonDao
{

	@Autowired
	private SessionFactory sessionFactory;

	public void createPerson(Person_t person)
	{
		sessionFactory.getCurrentSession()
		              .saveOrUpdate(person);
	}

	@SuppressWarnings("unchecked")
	public List<Person_t> readPersons()
	{

		sessionFactory.getCurrentSession()
		              .beginTransaction();
		List<Person_t> personList = sessionFactory.getCurrentSession()
		                                        .createQuery("from Person")
		                                        .list();
		sessionFactory.getCurrentSession()
		              .getTransaction()
		              .commit();

		return personList;
	}

	public List<Person_t> searchPerson(String search)
	{
		Session currentSession = sessionFactory.getCurrentSession();

		@SuppressWarnings("unchecked")
		List<Person_t> personList = currentSession.createCriteria(Person_t.class)
		                                        .add(Restrictions.disjunction()
		                                                         .add(Restrictions.ilike("cf",
		                                                                                 search,
		                                                                                 MatchMode.ANYWHERE))
		                                                         .add(Restrictions.ilike("name",
		                                                                                 search,
		                                                                                 MatchMode.ANYWHERE))
		                                                         .add(Restrictions.ilike("surname",
		                                                                                 search,
		                                                                                 MatchMode.ANYWHERE)))

		                                        .list();

		return personList;
	}

	public void deletePerson(int id)
	{
		Person_t person = (Person_t) sessionFactory.getCurrentSession()
		                                       .load(Person_t.class,
		                                             id);
		if (null != person)
		{
			this.sessionFactory.getCurrentSession()
			                   .delete(person);
		}
	}

	public Person_t updatePerson(Person_t person)
	{
		sessionFactory.getCurrentSession()
		              .update(person);
		return person;
	}

	public Person_t loadPerson(String cf)
	{

		Session currentSession = sessionFactory.getCurrentSession();

		Person_t person = (Person_t) currentSession.createCriteria(Person_t.class)
		                                       .add(Restrictions.eq("cf",
		                                                            cf))
		                                       .uniqueResult();

		return person;
	}

}