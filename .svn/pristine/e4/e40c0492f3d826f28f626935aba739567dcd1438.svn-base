package com.andreabazerla.dao;

import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.andreabazerla.model.Product_t;
import com.andreabazerla.model.Purchase_t;
import com.andreabazerla.model.Receipt_t;
import com.andreabazerla.model.User_t;
import com.andreabazerla.search.Search;

@Repository
public class ProductDaoImpl implements ProductDao
{

	@Autowired
	private SessionFactory sessionFactory;

	public void createProduct(Product_t product)
	{
		sessionFactory.getCurrentSession()
		              .saveOrUpdate(product);
	}

	@SuppressWarnings("unchecked")
	public List<Product_t> readProducts()
	{

		return sessionFactory.getCurrentSession()
		                     .createQuery("from Product_t")
		                     .list();
	}

	@SuppressWarnings(
	{ "unchecked", "deprecation" })
	public List<Product_t> readProducts(Search search)
	{

		Session session = sessionFactory.getCurrentSession();

		Criteria criteria = session.createCriteria(Product_t.class);

		criteria.add(Restrictions.conjunction());

		if (search.getName() != null)
		{
			criteria.add(Restrictions.ilike("name",
			                                search.getName(),
			                                MatchMode.ANYWHERE));
		}

		if (search.getDescription() != null)
		{
			criteria.add(Restrictions.ilike("description",
			                                search.getDescription(),
			                                MatchMode.ANYWHERE));
		}

//		if (search.getFactory_t() != null)
//		{
//			criteria.add(Restrictions.ilike("",
//			                                search.getDescription(),
//			                                MatchMode.ANYWHERE));
//		}

		if (search.getMin() != 0 && search.getMax() != 0)
		{
			criteria.add(Restrictions.between("price",
			                                  (float) search.getMin(),
			                                  (float) search.getMax()));
		}

		List<Product_t> productList = criteria.list();

		return productList;
	}

	public Product_t getProduct(int id)
	{

		Session session = sessionFactory.getCurrentSession();

		Product_t product = session.get(Product_t.class,
		                                id);

		return product;
	}

	public Product_t updateProduct(Product_t product)
	{
		sessionFactory.getCurrentSession()
		              .update(product);
		return product;
	}

	public void deleteProduct(int id)
	{
		Product_t product = (Product_t) sessionFactory.getCurrentSession()
		                                              .load(Product_t.class,
		                                                    id);
		if (null != product)
		{
			this.sessionFactory.getCurrentSession()
			                   .delete(product);
		}
	}

	@SuppressWarnings(
	{ "deprecation", "unchecked" })
	public List<Product_t> searchProduct(String search)
	{
		Session currentSession = sessionFactory.getCurrentSession();

		return currentSession.createCriteria(Product_t.class)
		                     .add(Restrictions.disjunction()
		                                      .add(Restrictions.ilike("cf",
		                                                              search,
		                                                              MatchMode.ANYWHERE))
		                                      .add(Restrictions.ilike("name",
		                                                              search,
		                                                              MatchMode.ANYWHERE))
		                                      .add(Restrictions.ilike("surname",
		                                                              search,
		                                                              MatchMode.ANYWHERE)))

		                     .list();
	}

	@SuppressWarnings("deprecation")
	@Override
	public void removeFromCart(int userId,
	                           int productId)
	{

		Session session = sessionFactory.getCurrentSession();

		User_t user = (User_t) session.createCriteria(User_t.class)
		                              .add(Restrictions.eq("id",
		                                                   userId))
		                              .uniqueResult();

		List<Product_t> productCartList = user.getProductCartList();

		Product_t product = getProduct(productId);

		Iterator<Product_t> iterator = productCartList.iterator();

		while (iterator.hasNext())
		{
			Product_t product_t = iterator.next();

			if (product_t.equals(product))
				iterator.remove();
		}

		product.setStatus("AVAILABLE");
	}

	@SuppressWarnings("deprecation")
	@Override
	public void removeFromShopping(int userId,
	                               int productId)
	{

		Session session = sessionFactory.getCurrentSession();

		User_t user = (User_t) session.createCriteria(User_t.class)
		                              .add(Restrictions.eq("id",
		                                                   userId))
		                              .uniqueResult();

		Map<Receipt_t, Purchase_t> productPurchaseMap = user.getReceiptPurchaseMap();

		Product_t product = getProduct(productId);

		Iterator<Entry<Receipt_t, Purchase_t>> iteratorReceiptPurchase = productPurchaseMap.entrySet()
		                                                                                   .iterator();

		while (iteratorReceiptPurchase.hasNext())
		{
			Entry<Receipt_t, Purchase_t> receiptPurchaseNext = iteratorReceiptPurchase.next();

			Iterator<Product_t> iteratorProduct = receiptPurchaseNext.getValue()
			                                                         .getProductList()
			                                                         .iterator();

			while (iteratorProduct.hasNext())
			{
				Product_t otherProduct = iteratorProduct.next();

				if (otherProduct.equals(product))
				{
					iteratorProduct.remove();
				}
			}

			List<Product_t> prodreceiptPurchaseList2 = receiptPurchaseNext.getValue()
			                                                              .getProductList();

			System.out.println(prodreceiptPurchaseList2);

		}

	}

}